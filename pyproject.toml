[project]
name = "AluBot"
description = "Personal Discord Bot"
readme = { file = "README.md", content-type = "text/markdown" }
license = { file = "LICENSE" }
requires-python = ">=3.12"
authors = [{ name = "Aluerie", email = "aluerie@gmail.com" }]
maintainers = [{ name = "Aluerie", email = "aluerie@gmail.com" }]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Natural Language :: English",
    "Programming Language :: Python ",
    "Topic :: Utilities",
    "Topic :: Discord Bots",
    "Typing :: Typed",
]
dynamic = ["version", "dependencies"]

[project.urls]
Homepage = "https://github.com/Aluerie/AluBot"

[tool.black]
# I use Ruff instead
line-length = 125
target-version = ["py312"]

[tool.isort]
# I use Ruff instead
profile = "black"
line_length = 125
combine_as_imports = true
combine_star = true

[tool.pyright]
pythonVersion = "3.12"
typeCheckingMode = "strict"
exclude = ["venv", "docs", "**/__pycache__"]

# https://github.com/microsoft/pyright/blob/main/docs/configuration.md
deprecateTypingAliases = true
reportImplicitOverride = "warning"
reportMissingTypeStubs = "none"    # A lot of libraries don't have stubs.
reportPrivateUsage = "none"        # it's my choice x_x

# there is a lot of **Incompatible** overriding in discord.py Bot development
# like `convert(ctx: AluContext, argument: str)` in converters.
reportIncompatibleVariableOverride = "none"
reportIncompatibleMethodOverride = "none"

reportUnnecessaryIsInstance = "none"           # I like "else" raising the error if type is somehow not it
reportUnnecessaryTypeIgnoreComment = "warning" # Preventing accidents

reportUnusedClass = "none"
reportUnusedFunction = "none"
reportUnusedImport = "warning"
reportUnusedVariable = "none"

# Unknown stuff - a lot of libraries do not **properly** declare types for everything
reportUnknownMemberType = "none"
reportUnknownVariableType = "none"
reportUnknownArgumentType = "none"

# `None` in strict, let's experiment
reportCallInDefaultInitializer = "warning"
reportImportCycles = "warning"
reportPropertyTypeMismatch = "warning"
reportUninitializedInstanceVariable	= "warning"
reportUnreachable = "warning"

# overly-worrisome linter-esque options
reportDuplicateImport = "none"  # handled by ruff

[tool.ruff]
# https://docs.astral.sh/ruff/rules/
# Examples of good ruff configurations:
# * https://github.com/AbstractUmbra/Mipha/blob/main/pyproject.toml
# * https://github.com/mikeshardmind/async-utils/blob/main/pyproject.toml
# * https://github.com/Rapptz/discord.py/blob/master/pyproject.toml
line-length = 125
target-version = "py312"
exclude = ["venv", "docs"]

[tool.ruff.lint]
preview = true
select = ["ALL"]
ignore = [
    # 0. Toggle - still thinking if we need those
    "D",      # pydocstyle: Doc-strings, 
    "D417",   # Missing argument description. Otherwise, it keeps asking to document interaction/context args.
    "DOC",    # pydoclint: Doc strings, 
    "ERA",    # eradicate: Found commented-out code
    "RUF100", # unused-noqa: Unused noqa directive

    # 1. Conflict with Ruff as a formatter, recommendation: https://docs.astral.sh/ruff/formatter/#conflicting-lint-rules.
    "W191",   # tab-indentation
    "E111",   # indentation-with-invalid-multiple
    "E114",   # indentation-with-invalid-multiple-comment 
    "E117",   # over-indented
    "D206",   # docstring-tab-indentation
    "D300",   # triple-single-quotes 
    "Q000",   # bad-quotes-inline-string
    "Q001",   # bad-quotes-multiline-string
    "Q002",   # bad-quotes-docstring
    "Q003",   # avoidable-escaped-quote
    "COM812", # missing-trailing-comma
    "COM819", # prohibited-trailing-comma
    "ISC002", # multi-line-implicit-string-concatenation

    # 1. General "public" disagreement with Ruff
    "ANN401",   # `Any` is the correct type in some cases
    "ASYNC116", # Long sleeps are fine
    "ASYNC109", # Discord.py and other libraries commonly use this parameter
    "C90",      # McCabe complexity memes
    "CPY001",   # Copyright stuff
    "F401",
    "F402", 
    "F403",
    "F405", 	
    "FBT003",   # Wrong end to enforce this on.
    "FIX",      # Wrong place to enforce this, Todo Tree extension (or any other) is advised.
    "INP001",   # Due to how we load modules this results in annoyances
    "PD011",    # This is not a numpy codebase
    "PLC0415",  # ruff gets this wrong, import needs to be not at top of file in some cases
    "PLR0904",  # **too many** public methods
    "PLR0911",  # **too many** returns
    "PLR0912",  # **too many** branches
    "PLR0913",  # **too many** function arguments
    "PLR0914",  # **too many** variables
    "PLR0915",  # **too many** statements: come on, not everything is solvable in <50 lines.
    "PLR0917",  # **too many** positional arguments
    "PLR6301",
    "PLR2004",  # Most people hate this rule - might remove later.
    "PYI058",   # This opinionated "fix" causes incompatibilities with things expecting a generator.
    "RUF001",   # Ambiguous characters not something I want to enforce here.
    "RUF029",   # Don't try and tell me I'm wrong for async def when something is for an interface.
    "S101",     # `assert` is used for type checking in this codebase, blame typing memes.
    "S311",     # Standard pseudo-random generators are not suitable for **cryptographic** purposes, so what.
    "SIM105",   # Suppressible exception, I'm not paying the overhead of `contextlib.suppress` for stylistic choices.
    "SLF001",
    "TD",       # Wrong place to enforce this, Todo Tree extension (or any other) is advised.
    "TRY003",   # over-eager rule
    "TRY301",   # unrealistic rule
    
    # 2. Personal disagreement
    "FLY002",
    "PLW2901", # Redefined loop name;
    "S608",    # I use f-strings with SQL and I don't know better;
    "TID252",  # My relative imports are quite well structured 

    # 3. Doc String
    "D100",   # Module level docs aren't always needed.
    "D104",   # Public package level docs aren't always needed.
    "D105",   # Documenting magic methods is often dumb.
    "D107",   # `__init__` is the wrong place to doc this.
    "D401",   # Not enforcing the imperative verb rule.
    "DOC201", # Not documenting generic return types
    "DOC402", # Not documenting generic `yield` types
    "DOC501", # Not explicitly documenting raised exception types
]
unfixable = [
    "E501",   # Line length handled in other ways by ruff formatter.
    "ERA",    # Don't delete commented out code.
    "RUF100", # Unused `noqa` directive. I prefer to deal with it manually, also annoying when toggling some rules.
]

[tool.ruff.lint.per-file-ignores]
"ext/beta.py" = ["ANN201"]
"*.ipynb" = ["ANN204", "D", "DOC", "ERA", "F404", "T20", "W391"]

[tool.ruff.format]
quote-style = "double"             # Like Black, use double quotes for strings.
indent-style = "space"             # Like Black, indent with spaces, rather than tabs.
skip-magic-trailing-comma = false  # Like Black, respect magic trailing commas.
line-ending = "auto"               # Like Black, automatically detect the appropriate line ending.

[tool.ruff.lint.isort]
combine-as-imports = true

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.lint.flake8-annotations]
allow-star-arg-any = true

[tool.ruff.lint.flake8-quotes]
inline-quotes = "double"
