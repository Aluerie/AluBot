[tool.black]
# I use ruff over it
line-length = 120
target-version = ["py312"]

[tool.isort]
# I use ruff over it
profile = "black"
combine_as_imports = true
combine_star = true
line_length = 120

[tool.pyright]
pythonVersion = "3.12"
typeCheckingMode = "strict"  # let's enable the default max setting and go down from here.
exclude = ["**/__pycache__"]
# https://github.com/microsoft/pyright/blob/main/docs/configuration.md

deprecateTypingAliases = true
reportMissingTypeStubs = "none"    # a lot of libs don't have stubs
reportPrivateUsage = "none"        # it's my choice x_x
reportImplicitOverride = "warning" # I love it

# Unnecessary
reportUnnecessaryIsInstance = "none"           # I like "else" raising the error if type is somehow not it
reportUnnecessaryTypeIgnoreComment = "warning" # why it's "none" by default, even for strict ?!

# Unused stuff - yes, I write a lot of unused stuff
reportUnusedImport = "warning"
reportUnusedVariable = "none"
reportUnusedClass = "none"
reportUnusedFunction = "none"

# Unknown stuff - a lot of libs don't **properly** declare types
reportUnknownMemberType = "none"
reportUnknownVariableType = "none"
reportUnknownArgumentType = "none"

# there is a lot of **Incompatible** overriding in discord.py Bot development
# like `convert(ctx: AluContext, argument: str)` in converters.
reportIncompatibleVariableOverride = "none"
reportIncompatibleMethodOverride = "none"

[tool.ruff]
# https://docs.astral.sh/ruff/rules/
# Examples of good ruff configurations:
# * https://github.com/AbstractUmbra/Mipha/blob/main/pyproject.toml
# * https://github.com/mikeshardmind/async-utils/blob/main/pyproject.toml
line-length = 120
target-version = "py312"
# requires-python = ">= 3.10"

[tool.ruff.lint]
preview = true
select = [
    "A",        # shadowing
    "ANN",      # annotations
    "ASYNC",    # async
    "B",        # _bug-bear
    "BLE",      # blind except
    "C4",       # better list/set/dict comprehensions
    "COM",      # commas
    "DTZ",      # datetime timezone
    "E",        # pycodestyle against PEP-8
    "EM",       # exception messages
    "ERA",      # eradicate commented out code
    "F",        # pyflakes analyze for errors 
    "FA",       # future annotations
    "FBT",      # boolean trap
    "FURB",     # refurbishing and modernizing Python codebases.  # cSpell: ignore FURB
    "G",        # logging format
    "I",        # isort
    "INP",      # ban PEP-420 (implicit-namespace-package)
    "ICN",      # import conventions
    "ISC",      # encourage correct string literal concatenation.
    "NPY",      # NumPy specific rules
    "PD",       # Pandas specific rules
    "PERF",     # performance anti-patterns
    "PGH",      # py grep-hooks
    "PIE",      # miscellaneous lints
    "PLC",      # PyLint Conventions
    "PLE",      # PyLint Errors
    "PLR",      # PyLint Refactor
    "PLW",      # PyLint Warnings
    "PTH",      # Use PathLib
    "PYI",      # linting for stub files
    "Q",        # quotes
    "Q003",     # change outer quotes to avoid escaping inner quotes
    "RET",      # return
    "RSE",      # raise statements.
    "RUF",      # Ruff-specific rules
    "S",        # security testing 
    "SIM",      # simplify
    "SLOT",     # require __slots__ to be defined for subclasses of immutable types
    "T20",      # print
    "TC",       # type checking
    "TID",      # tidy imports
    "TRY",      # clean try/except
    "UP",       # upgrade syntax for newer versions of the language.
    "YTT",      # misuse of sys.version or sys.version_info
    # EXPERIMENTAL ADDITIONS
    "W",        # pycodestyle warnings
    "N",        # pep-8 namings
    "D",        # Doc-string madness, kinda annoying for a bot, to be honest
    "DOC"       # Doc strings, kinda annoying for a bot, to be honest
]
ignore = [
    "ANN401",   # `Any` is the correct type in some cases
    "ASYNC109", # dpy commonly uses this parameter
    "ASYNC116", # Long sleeps are fine
    "C90",      # mc cabe complexity memes
    "F401",     # unused imports
    "F403",     # wildcard imports: `from math import *` are used in __init__.py a lot
    "F405",     # wildcard imports
    "INP001",   # due to how I load modules this results in annoyances
    "PLC0415",  # ruff gets this wrong, import needs to be not at top of file in some cases
    "PLR0912",  # too many branches
    "PLR0913",  # number of function arguments
    "PLR0914",  # too many variables: come on
    "PLR0915",  # too many statements: come on, not everything is solvable in <50 lines.
    "PLR6301",  # discord.py uses `self` even if I don't
    "S101",     # use of assert here is a known quantity, blame typing memes

    # OLD RULES
    # "F401",
    # "F402",
    
    # "PERF203",
    # "RUF001",
    # "RUF009",
    # "SIM105",
    # "UP034",
    # "UP038",

    # DOC STRINGS
    # general doc string exceptions
    "D100",     # Missing docstring in module: no, module level docs aren't always needed
    "D105",     # Missing docstring in magic method: documenting magic methods is often dumb.
    "D107",     # Missing docstring in `__init__`: __init__ is the wrong place to doc this.
    "D401",     # Doc should be starting with an imperative verb: dumb rule tbh.
    # doc string exceptions 
    # for this bot because it's a bot and it's pointless to document *everything* in one-man project.
    "DOC201",   # `return` is not documented in docstring

    # "D104",    # Missing docstring in public package. Otherwise spams __init__.py and such.
    # "D417",    # Missing argument description. Otherwise, it keeps asking to document interaction/context args.
    # "D203", # one-blank-line-before-class
    # "D213", # multi-line-summary-second-line
]
unfixable = [
    "E501", # line length handled in other ways by ruff format
    "ERA",  # Don't delete commented out code
]

[tool.ruff.lint.per-file-ignores]
"ext/beta.py" = ["ANN201"]
"*.ipynb" = ["T20", "F404", "ANN204"]

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"
# Like Black, indent with spaces, rather than tabs.
indent-style = "space"
# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false
# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

[tool.ruff.lint.isort]
split-on-trailing-comma = true
combine-as-imports = true

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.lint.flake8-annotations]
allow-star-arg-any = true

[tool.ruff.lint.flake8-quotes]
inline-quotes = "double"

[project]
name = "AluBot"
description = "Personal Discord Bot"
readme = "readme.md"
version = "2024.0.0"
requires-python = ">=3.12"
authors = [{ name = "Aluerie" }]
maintainers = [{ name = "Aluerie" }]

[project.urls]
Homepage = "https://github.com/Aluerie/AluBot"